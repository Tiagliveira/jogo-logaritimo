/**
 * Projeto: Jogo Logoritmos
 * Autor: Tiago Oliveira
 * Descri√ß√£o: Script principal do jogo ‚Äî controle de telas, cadastro, login, hist√≥rico e anima√ß√µes
 * √öltima atualiza√ß√£o: 25/09/2025
 */
const API_URL = location.hostname === "localhost"
  ? "http://localhost:3000"
  : "https://seu-backend.vercel.app";
// ===============================
// Vari√°veis globais do jogo
// ===============================
let telaEmTransicao = false; // Controla se h√° uma transi√ß√£o de tela em andamento
let currentLevel = 1;        // N√≠vel atual do jogador
let lives = 3;               // N√∫mero de vidas restantes
let number = 0;              // N√∫mero secreto do n√≠vel
let attempts = 0;            // Tentativas feitas no n√≠vel atual
let numberOfGuesses = 0;     // Total de palpites feitos
let history = [];            // Hist√≥rico de palpites
let nome = "";               // Nome do jogador
let historicalShow = true;   // Exibe hist√≥rico no modo f√°cil
let estadoDeTransicao = false; // Estado de transi√ß√£o visual
let confeteInterval, coracaoInterval, gameOverInterval, TrofeuInterval, coroaInterval; // Efeitos visuais

// ==================================================
// FUN√á√ÉO: transicaoDeTela
// Descri√ß√£o: Realiza a transi√ß√£o visual entre duas telas com fade-out e fade-in
// ==================================================
function transicaoDeTela(telaAtualId, proximaTelaId) {
  telaEmTransicao = true;

  const atual = document.getElementById(telaAtualId);
  const proxima = document.getElementById(proximaTelaId);

  if (!atual || !proxima) return;

  atual.classList.add("fade-out");

  setTimeout(() => {
    atual.style.display = "none";
    atual.classList.remove("fade-out");

    proxima.style.display = "block";
    proxima.classList.add("fade-in");

    setTimeout(() => {
      proxima.classList.remove("fade-in");
      telaEmTransicao = false;
    }, 1000);
  }, 1000);
}

// ==================================================
// FUN√á√ÉO: atualizarBotao
// Descri√ß√£o: Alterna entre "Login" e "Cadastrar usu√°rio" com base no checkbox
// ==================================================
function atualizarBotao() {
  const checkbox = document.getElementById("logarDireto");
  const botao = document.getElementById("botaoPrincipal");

  if (checkbox.checked) {
    botao.textContent = "Login";
    botao.onclick = login;
  } else {
    botao.textContent = "Cadastrar usu√°rio";
    botao.onclick = cadastrar;
  }
}

// ==================================================
// FUN√á√ÉO: cadastrar
// Descri√ß√£o: Cadastra novo jogador, gera avatar, envia dados ao backend e atualiza interface
// ==================================================
async function cadastrar() {
  const nomeInput = document.getElementById("nome");
  const nome = nomeInput.value.trim();
  const logarDireto = document.getElementById("logarDireto").checked;
  const mensagem = document.getElementById("mensagemCadastro");
  const avatarCadastro = document.getElementById("avatarCadastro");

  if (!nome) {
    alert("Digite um nome v√°lido!");
    return;
  }

  // Gera avatar aleat√≥rio com DiceBear
  const estilos = ["bottts", "adventurer", "fun-emoji", "lorelei", "thumbs", "shapes", "notionists"];
  const estiloAleatorio = estilos[Math.floor(Math.random() * estilos.length)];
  const avatarUrl = `https://api.dicebear.com/7.x/${estiloAleatorio}/svg?seed=${encodeURIComponent(nome)}`;

  // Envia dados para o backend hospedado na Vercel
  const resposta = await fetch(`${API_URL}/cadastro`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ id: nome, avatar: avatarUrl }),
  });

  const texto = await resposta.text();

  if (resposta.ok) {
    // ‚úÖ Cadastro bem-sucedido
    mensagem.textContent = "‚úÖ " + texto;
    mensagem.style.color = "green";

    // Atualiza nome do jogador
    const nomeJogador = document.getElementById("nomeJogador");
    if (nomeJogador) {
      nomeJogador.textContent = `üë§ Jogador: ${nome}`;
      console.log("Nome do jogador:", nome);
    }

    // Aguarda carregamento do avatar antes da transi√ß√£o
    const avatarBoasVindas = document.getElementById("avatarBoasVindas");
    const imgTemp = new Image();
    imgTemp.onload = () => {
      avatarBoasVindas.src = avatarUrl;
      avatarBoasVindas.style.display = "block";
      transicaoDeTela("formulario", "welcomeArea");
    };
    imgTemp.src = avatarUrl;

    // Atualiza avatares
    avatarCadastro.src = avatarUrl;
    avatarCadastro.style.display = "block";

    const avatarJogo = document.getElementById("avatarJogo");
    if (avatarJogo) {
      avatarJogo.src = avatarUrl;
      avatarJogo.style.display = "block";
    }

    // Salva dados localmente
    localStorage.setItem("estadoTela", "boasVindas");
    localStorage.setItem("nomeJogador", nome);
    localStorage.setItem("avatarJogador", avatarUrl);

    // Salva hist√≥rico inicial
    const palpitesIniciais = ["5", "8", "3"];
    salvarHistorico(nome, palpitesIniciais);

    nomeInput.value = nome;

    // Faz login autom√°tico ap√≥s cadastro
    await login();

  } else if (texto === "Usu√°rio j√° existe") {
    // ‚ö†Ô∏è Nome j√° cadastrado
    mensagem.textContent = "‚ö†Ô∏è Usu√°rio j√° existe. Escolha outro nome.";
    mensagem.style.color = "orange";
    nomeInput.value = "";
    avatarCadastro.style.display = "none";

    document.getElementById("logarDireto").checked = false;
    atualizarBotao();

  } else {
    // ‚ö†Ô∏è Outro erro
    mensagem.textContent = "‚ö†Ô∏è " + texto;
    mensagem.style.color = "red";
    avatarCadastro.style.display = "none";
  }
}

// ==================================================
// FUN√á√ÉO: login
// Descri√ß√£o: Realiza login do jogador e atualiza interface com dados do servidor
// ==================================================
async function login() {
  const nome = document.getElementById("nome").value;

  const resposta = await fetch(`${API_URL}/login`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ id: nome }),
  });

  const mensagem = document.getElementById("mensagemCadastro");
  const avatarJogo = document.getElementById("avatarJogo");

  if (resposta.ok) {
    const dados = await resposta.json();

    currentLevel = dados.dados.nivel;
    lives = typeof dados.dados.vidas === "number" ? dados.dados.vidas : 3;
    atualizarVidas();

    mensagem.textContent = "üõ∏ " + dados.mensagem;
    mensagem.style.color = "blue";

    if (dados.dados && dados.dados.avatar) {
      avatarJogo.src = dados.dados.avatar;
      avatarJogo.style.display = "block";

      localStorage.setItem("avatarJogador", dados.dados.avatar);
      localStorage.setItem("nomeJogador", nome);
    }

    document.querySelector(".formulario").style.display = "none";
    document.getElementById("welcomeArea").style.display = "block";

    const avatarBoasVindas = document.getElementById("avatarBoasVindas");
    if (avatarBoasVindas) {
      avatarBoasVindas.src = dados.dados.avatar;
      avatarBoasVindas.style.display = "block";
    }

    const nomeJogador = document.getElementById("nomeJogador");
    if (nomeJogador) {
      nomeJogador.textContent = ` ol√° ${nome}`;
    }
  } else {
    mensagem.textContent = "üö´ " + (await resposta.text());
    mensagem.style.color = "red";
    avatarJogo.style.display = "none";
    console.log("Resposta do servidor:", resposta.status);
  }

  await carregarRanking();
}

// ==================================================
// FUN√á√ÉO: salvarHistorico
// Descri√ß√£o: Envia hist√≥rico de palpites para o servidor (ranking e modo f√°cil)
// ==================================================
async function salvarHistorico(nomeDoJogador, palpites) {
  try {
    await fetch(`${API_URL}/salvar-historico`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        id: nomeDoJogador,
        historico: palpites,
      }),
    });
  } catch (err) {}
}

// ==================================================
// EVENTO: DOMContentLoaded
// Descri√ß√£o: Executa ao carregar a p√°gina e exibe a tela correta com base no localStorage
// ==================================================
window.addEventListener("DOMContentLoaded", async () => {
  if (telaEmTransicao) return;
  atualizarBotao();

  const estado = localStorage.getItem("estadoTela");
  const nome = localStorage.getItem("nomeJogador");

  if (estado === "jogo" && nome) {
    document.getElementById("nome").value = nome;
    await login();
    document.getElementById("welcomeArea").style.display = "none";
    document.getElementById("gameArea").style.display = "block";
    iniciarNivel();
  } else if (estado === "boasVindas" && nome) {
    document.getElementById("nome").value = nome;
    document.querySelector(".formulario").style.display = "none";
    document.getElementById("welcomeArea").style.display = "block";
  } else {
    // Estado inicial
    document.querySelector(".formulario").style.display = "block";
    document.getElementById("welcomeArea").style.display = "none";
    document.getElementById("gameArea").style.display = "none";
  }
});

// ==================================================
// FUN√á√ÉO: entrarNoJogo
// Descri√ß√£o: Inicia o jogo ap√≥s o jogador escolher o modo e preencher o nome
// ==================================================
function entrarNoJogo() {
  const nome = document.getElementById("nome").value.trim();
  if (!nome) return alert("Digite seu nome!");

  // Salva estado e modo de jogo
  localStorage.setItem("estadoTela", "jogo");
  localStorage.setItem("nomeJogador", nome);

  const modoSelecionado = document.querySelector('input[name="modo"]:checked').value;
  localStorage.setItem("modoJogo", modoSelecionado);
  historicalShow = modoSelecionado === "facil";

  // Exibe tela do jogo e oculta as demais
  document.querySelector(".formulario").style.display = "none";
  document.getElementById("welcomeArea").style.display = "none";
  document.getElementById("gameArea").style.display = "block";

  // Sincroniza avatar e nome
  const avatarUrl = localStorage.getItem("avatarJogador");
  const avatarJogo = document.getElementById("avatarJogo");
  if (avatarJogo && avatarUrl) {
    avatarJogo.src = avatarUrl;
    avatarJogo.style.display = "block";
  }

  const nomeJogador = document.getElementById("nomeJogador");
  if (nomeJogador) {
    nomeJogador.textContent = `üë§ Jogador: ${nome}`;
  }

  // Inicia l√≥gica do jogo
  iniciarNivel();
  atualizarVidas();
  carregarRanking();
}

// ==================================================
// FUN√á√ÉO: sairDoJogo
// Descri√ß√£o: Retorna √† tela de cadastro e limpa dados visuais
// ==================================================
function sairDoJogo() {
  localStorage.setItem("estadoTela", "formulario"); // ‚úÖ atualiza estado

  document.getElementById("vidasContainer").textContent = "";
  document.getElementById("gameArea").style.display = "none";
  document.getElementById("welcomeArea").style.display = "none";
  document.querySelector(".formulario").style.display = "block";
}

// ==================================================
// EVENTO: DOMContentLoaded
// Descri√ß√£o: Executa ao carregar a p√°gina e restaura estado salvo
// ==================================================
window.addEventListener("DOMContentLoaded", () => {
  atualizarBotao();
  carregarRanking();

  const estado = localStorage.getItem("estadoTela");
  const nome = localStorage.getItem("nomeJogador");
  const avatar = localStorage.getItem("avatarJogador");

  if (estado === "jogo" && nome && avatar) {
    document.querySelector(".formulario").style.display = "none";
    document.getElementById("welcomeArea").style.display = "none";
    document.getElementById("gameArea").style.display = "block";

    const avatarJogo = document.getElementById("avatarJogo");
    avatarJogo.src = avatar;
    avatarJogo.style.display = "block";

    const nomeJogador = document.getElementById("nomeJogador");
    nomeJogador.textContent = `üë§ Jogador: ${nome}`;

    iniciarNivel();
    atualizarVidas();
    carregarRanking();
  }
});

// ==================================================
// FUN√á√ÉO: carregarRanking
// Descri√ß√£o: Busca ranking do servidor e atualiza Top 3 e lista completa
// ==================================================
async function carregarRanking() {
  try {
    const resposta = await fetch(`${API_URL}/ranking`);
    const ranking = await resposta.json();

    const nomeAtual = localStorage.getItem("nomeJogador");
    const trofeus = ["ü•á", "ü•à", "ü•â"]; // Trof√©us para os 3 primeiros
    const simbolosExtras = ["üéñÔ∏è", "üéóÔ∏è", "‚≠ê", "üåü", "üî∞", "ü™ê", "üöÄ"];


    // Atualiza Top 3
    const topRanking = document.getElementById("topRanking");
    topRanking.innerHTML = "";
    ranking.slice(0, 3).forEach((jogador, index) => {
      const li = document.createElement("li");
      li.innerHTML = `
      <div class="miniRanking">
       <p class="trofeu">${trofeus[index]}</p>
        <div class="avatarMiniRanking">
        <img src="${jogador.avatar}" alt="Avatar de ${jogador.id}">
        </div>
         ${jogador.id} - N√≠vel M√°ximo ${jogador.nivelMaximo}
         </div>
      `;
      topRanking.appendChild(li);
    });

    // Atualiza ranking completo
    const listaCompleta = document.getElementById("listaRankingCompleto");
    listaCompleta.innerHTML = "";
    ranking.forEach((jogador, index) => {
      const li = document.createElement("li");

      if (jogador.id === nomeAtual) {
        li.style.backgroundColor = "#ff0000";
        li.style.fontWeight = "bold";
        li.style.color = "white"
        li.style.borderRadius = "50px"
        li.style.border = "2px solid black"
      }

      const simbolo = index < 3 
  ? trofeus[index] 
  : index < 10 
    ? simbolosExtras[index - 3] 
    : "";

      li.innerHTML = `
      <div class="RankingGeal">
        <p class="simbolos">${simbolo}</p>
        <div class="avatarRankingGeral">
        <img src="${jogador.avatar}" alt="Avatar de ${jogador.id}">
        </div>
         ${jogador.id} - N√≠vel M√°ximo ${jogador.nivelMaximo}
         </div>
      `;
      listaCompleta.appendChild(li);
    });
  } catch (err) {
    console.error("Erro ao carregar ranking:", err);
  }
}

// ==================================================
// FUN√á√ïES: mostrarRankingCompleto / fecharRanking
// Descri√ß√£o: Controlam exibi√ß√£o da tela de ranking com anima√ß√£o
// ==================================================
function mostrarRankingCompleto() {
  const ranking = document.getElementById("rankingCompleto");
  ranking.classList.remove("fade-out");
  ranking.classList.add("fade-in");
  ranking.style.display = "block";
}

function fecharRanking() {
  const ranking = document.getElementById("rankingCompleto");
  ranking.classList.remove("fade-in");
  ranking.classList.add("fade-out");
}

// ==================================================
// FUN√á√ÉO: atualizarVidas
// Descri√ß√£o: Atualiza visual dos cora√ß√µes com base nas vidas restantes
// ==================================================
function atualizarVidas() {
  const container = document.getElementById("vidasContainer");
  if (!container) return;

  const coracaoCheio = "‚ù§Ô∏è";
  const coracaoVazio = "ü§ç";
  const totalVidas = 3;

  let coracoes = "";
  for (let i = 0; i < totalVidas; i++) {
    coracoes += i < lives ? coracaoCheio : coracaoVazio;
  }

  container.textContent = `${coracoes}`;
}

// ==================================================
// FUN√á√ÉO: reiniciarJogo
// Descri√ß√£o: Reinicia o jogo ap√≥s Game Over e reseta estado
// ==================================================
async function reiniciarJogo() {
  pararGameOverLoop();
  pararCoroaLoop();

  currentLevel = 1;
  lives = 3;
  estadoDeTransicao = false;

  atualizarVidas();
  iniciarNivel();

  document.getElementById("palpite").disabled = false;
  document.getElementById("enviarPalpite").disabled = false;

  const nomeJogador = localStorage.getItem("nomeJogador");

  await fetch(`${API_URL}/reiniciar-nivel`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ id: nomeJogador }),
  });
  transicaoDeTela("gameOverArea", "gameArea");
}

// ==================================================
// FUN√á√ÉO: continuarJogo
// Descri√ß√£o: Continua o jogo ap√≥s perder uma vida e atualiza servidor
// ==================================================
async function continuarJogo() {
  estadoDeTransicao = false;

  pararCoracaoLoop();

  const nomeJogador = localStorage.getItem("nomeJogador");

  await fetch(`${API_URL}/atualizar-nivel`, {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      id: nomeJogador,
      nivelAtual: currentLevel,
      vidas: lives,
    }),
  });

  iniciarNivel();
  transicaoDeTela("vidaPerdidaArea", "gameArea");
}

// ==================================================
// FUN√á√ÉO: limparInputPalpite
// Descri√ß√£o: Limpa o campo de input do palpite
// ==================================================
function limparInputPalpite() {
  const input = document.getElementById("palpite");
  if (input) input.value = "";
}

// ==================================================
// FUN√á√ÉO: continuarVitoria
// Descri√ß√£o: Avan√ßa para o pr√≥ximo n√≠vel ap√≥s vit√≥ria
// ==================================================
async function continuarVitoria() {
  estadoDeTransicao = false;

  const nomeJogador = localStorage.getItem("nomeJogador");

  try {
    await fetch(`${API_URL}/atualizar-nivel`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        id: nomeJogador,
        nivelAtual: currentLevel,
        vidas: lives,
      }),
    });
    await carregarRanking();
  } catch (err) {}
  pararConfetesLoop();
  pararTrofeuLoop();
  transicaoDeTela("vitoriaArea", "gameArea");

  // Aguarda fim da anima√ß√£o antes de iniciar novo n√≠vel
  setTimeout(() => {
    iniciarNivel();
  }, 1000); 
}

// ==================================================
// FUN√á√ïES: mostrarRankingCompleto / voltarDoRanking
// Descri√ß√£o: Controlam transi√ß√£o entre tela de jogo e ranking
// ==================================================
function mostrarRankingCompleto() {
  transicaoDeTela("gameArea", "rankingArea");
}

function voltarDoRanking() {
  localStorage.setItem("estadoTela", "jogo");
  transicaoDeTela("rankingArea", "gameArea");
}

// ==================================================
// FUN√á√ïES DE EFEITO VISUAL: Confetes, Cora√ß√£o, Game Over, Trof√©u, Coroa
// Descri√ß√£o: Criam e controlam anima√ß√µes visuais durante o jogo
// ==================================================
function estourarConfetes() {
  const container = document.getElementById("confeteExplosao");
  container.innerHTML = "";

  for (let i = 0; i < 40; i++) {
    const confete = document.createElement("span");
    confete.style.left = Math.random() * 100 + "%";
    confete.style.top = Math.random() * 20 + "%";
    confete.style.setProperty("--hue", Math.floor(Math.random() * 360));
    container.appendChild(confete);
  }

  setTimeout(() => {
    container.innerHTML = "";
  }, 2000);
}

function iniciarConfetesLoop() {
  estourarConfetes(); // dispara imediatamente
  confeteInterval = setInterval(estourarConfetes, 5000);
}

function pararConfetesLoop() {
  clearInterval(confeteInterval);
}

function estourarCoracao() {
  const el = document.getElementById("explosaoCoracao");
  el.innerHTML = ""; // limpa antes de criar novo

  const heart = document.createElement("span");
  heart.textContent = "üíî";
  heart.classList.add("coracaoAnimado");

  void heart.offsetWidth;// Reinicia anima√ß√£o
  el.appendChild(heart);

  setTimeout(() => {
    heart.remove();
  }, 1200);
}

function iniciarCoracaoLoop() {
  estourarCoracao(); // dispara imediatamente
  coracaoInterval = setInterval(estourarCoracao, 3000); // repete a cada 3s
}

function pararCoracaoLoop() {
  clearInterval(coracaoInterval);
}

function estourarGameOver() {
  const el = document.getElementById("explosaoGameOver");
  el.innerHTML = "";

  const ghost = document.createElement("span");
  ghost.textContent = "üëª"; // ou "üíÄ"
  ghost.classList.add("gameOverAnimado");

  void ghost.offsetWidth;

  el.appendChild(ghost);

  setTimeout(() => {
    ghost.remove();
  }, 2000);
}

function iniciarGameOverLoop() {
  estourarGameOver();
  gameOverInterval = setInterval(estourarGameOver, 3000);
}

function pararGameOverLoop() {
  clearInterval(gameOverInterval);
}

function estourarTrofeu() {
  const el = document.getElementById("explosaoTrofeu");
  el.innerHTML = "";

  const trofeu = document.createElement("span");
  trofeu.textContent = "üèÜ";
  trofeu.classList.add("trofeuAnimado");

  void trofeu.offsetWidth;

  el.appendChild(trofeu);

  setTimeout(() => {
    el.innerHTML = "";
  }, 1500);
}

function iniciarTrofeuLoop() {
  estourarTrofeu(); // dispara imediatamente
  TrofeuInterval = setInterval(estourarTrofeu, 3000); // repete a cada 3s
}

function pararTrofeuLoop() {
  clearInterval(TrofeuInterval);
}

function estourarCoroaFinal() {
  const el = document.getElementById("explosaoCoroa");
  el.innerHTML = "";

  const coroa = document.createElement("span");
  coroa.textContent = "üëë";
  coroa.classList.add("coroaAnimada");

  void coroa.offsetWidth;

  el.appendChild(coroa);

  setTimeout(() => {
    el.innerHTML = "";
  }, 2000);
}

function iniciarCoroaLoop() {
  estourarCoroaFinal(); // dispara imediatamente
  coroaInterval = setInterval(estourarCoroaFinal, 3000); // repete a cada 3 segundos
}

function pararCoroaLoop() {
  clearInterval(coroaInterval);
}

// ==================================================
// FUN√á√ÉO: mostrarTelaMotivacional
// Descri√ß√£o: Exibe tela final com mensagem personalizada
// ==================================================
function mostrarTelaMotivacional() {
  const nomeJogador = localStorage.getItem("nomeJogador") || "Jogador";
  document.getElementById("nomeFinal").textContent = nomeJogador;
  document.getElementById("nomeFinal2").textContent = nomeJogador;

  transicaoDeTela("vitoriaFinalArea", "telaMotivacional");
}

// ==================================================
// FRASES DE INTERA√á√ÉO COM O JOGADOR
// Descri√ß√£o: Mensagens din√¢micas para cada situa√ß√£o do jogo
// ==================================================
const kickeItDown = [
  "üîª Chutou baixo! Tenta mais alto.",
  "üéØ Ainda n√£o, sobe esse numero!",
  "üòéQuase l√°, tenta um pouco mais alto!",
  "üßäT√° frio, mas sobe mais um pouco!",
  "üî•T√° esquentando, mas tenta mais alto!",
];

const kickedUp = [
  "üî∫ Chutou alto! Tenta mais baixo.",
  "üéØAinda n√£o, desce esse numero!",
  "üòéQuase l√°, tenta um pouco mais baixo!",
  "üßäT√° frio, mas desce mais um pouco!",
  "üî•T√° esquentando, mas tenta mais baixo!",
];

const victory = [
  "üéâ Parab√©ns!, voc√™ acertou, vamos para Proxima?",
  "üëè Mandou bem, acertou em cheio.",
  "üí™ Voc√™ √© bom nisso, acertou em cheio",
  "üéâ Voc√™ √© fera! vamos para o proximo nivel.",
];

const defait = [
  "üíÄ Game Over! Tente novamente.",
  "üòµ‚Äçüí´ N√£o foi dessa vez, mas n√£o desista.",
  "üëª O numero secreto te assombrou dessa vez, tente novamente.",
  "üí• Voc√™ errou! mas n√£o desista, tente novamente.",
];

const incentive = [
  "üöÄ Vamos l√°, voc√™ consegue!",
  "üî• N√£o desista, voc√™ est√° quase l√°!",
  "üåü Acredite em si mesmo, voc√™ √© capaz!",
  "üí° Cada tentativa te aproxima do sucesso!",
];

const attemptPhrases5 = [
  `üéØ Voc√™ ainda tem {X} tentativas. Respira e vai com calma.`,
  `üí™ T√° tranquilo! {X} chances pra mostrar seu talento.`,
  `üß† Use a cabe√ßa, ainda tem {X} tentativas pra acertar.`,
  `üòé Jogo s√≥ come√ßou! {X} chances na manga.`,
  `üöÄ Bora aquecer! Ainda restam {X} tentativas.`,
];

const attemptPhrases3 = [
  `‚ö†Ô∏è S√≥ {X} tentativas restantes. Come√ßa a focar!`,
  `‚è≥ T√° ficando apertado‚Ä¶ {X} chances pra virar o jogo.`,
  `üîç Pensa bem! S√≥ restam {X} tentativas.`,
  `üß© T√° na metade do caminho. {X} chances pra resolver.`,
  `üéÆ Jogo t√° pegando ritmo! {X} tentativas restantes.`,
];

const attemptPhrases1 = [
  `üö® √öltima chance! √â agora ou nunca.`,
  `üí£ S√≥ {X} tentativa! Cada palpite conta.`,
  `üßä T√° no limite! {X} chance pra salvar o jogo.`,
  `üî• Tudo ou nada! {X} tentativa restantes.`,
  `üéØ Mira com precis√£o‚Ä¶ s√≥ {X} chance sobrando`,
];

const outOfBounds = [
  "üß† Esse n√∫mero nem existe nesse n√≠vel, campe√£o!",
  "üòÖ T√° zuando, mane? Escolhe um n√∫mero v√°lido!",
  "üìâ Esse chute foi t√£o fora que saiu do jogo.",
  "üö´ N√∫mero inv√°lido! Joga dentro das regras, vai.",
];

const Bozz = [
  "üèÜ Voc√™ venceu o chef√£o!",
  "üéâ Parab√©ns, campe√£o! Voc√™ dominou todos os n√≠veis.",
  "üëë Agora √© oficial: voc√™ √© o mestre dos n√∫meros!",
];
const gameOver = [
  "üíÄ O universo te apagou. Tudo recome√ßa.",
  "üß† Brilhante... se errar fosse talento, voc√™ seria campe√£o.",
  "üöÄ A nave explodiu. Miss√£o abortada.",
  "üîÅ Game Over. Mas a pr√≥xima tentativa pode ser lend√°ria.",
];

// ==================================================
// FUN√á√ÉO: iniciarJogo
// Descri√ß√£o: Inicia o jogo e exibe avatar gerado
// ==================================================
function iniciarJogo() {
  nome = document.getElementById("nome").value.trim();
  if (!nome) return alert("Digite seu nome!");

  document.getElementById(
    "avatar"
  ).src = `https://api.dicebear.com/7.x/bottts/svg?seed=${nome}`;
  document.getElementById("avatar").style.display = "block";

  iniciarNivel();
}

// ==================================================
// FUN√á√ÉO: iniciarNivel
// Descri√ß√£o: Define n√∫mero secreto, tentativas e atualiza interface
// ==================================================
function iniciarNivel() {
  const min = 1;
  const max = multipliedByLevel(currentLevel);
  number = getNumberRandon(min, max);
  attempts = Math.ceil(Math.log2(max - min + 1));
  numberOfGuesses = 0;
  history = [];

  const nivelInfo = document.getElementById("nivelInfo");
  if (nivelInfo) {
    nivelInfo.innerHTML = `üß† N√≠vel ${currentLevel} ‚Äî Adivinhe entre ${min} e ${max}.<br> Voc√™ tem ${attempts} tentativas.`;
  }

  const mensagemJogo = document.getElementById("mensagemJogo");
  if (mensagemJogo) {
    mensagemJogo.innerHTML = "";
  }

  const historico = document.getElementById("historico");
  if (historico) {
    historico.innerHTML = "";
  }
  atualizarVidas();
}

// ==================================================
// FUN√á√ÉO: jogar
// Descri√ß√£o: Processa o palpite do jogador, verifica acerto, atualiza vidas e controla transi√ß√µes
// ==================================================
async function jogar() {
  if (estadoDeTransicao) return;
  const palpite = parseInt(document.getElementById("palpite").value);
  const mensagem = document.getElementById("mensagemJogo");
  const historico = document.getElementById("historico");

  // Valida√ß√£o do palpite
  if (isNaN(palpite)) {
    mensagem.innerHTML = "üö´ Digite um n√∫mero v√°lido!";
    return;
  }

  limparInputPalpite();

  const min = 1;
  const max = multipliedByLevel(currentLevel);

  // Verifica se o palpite est√° fora do intervalo permitido
  if (palpite < min || palpite > max) {
    mensagem.innerHTML = randomPhrase(outOfBounds);
    return;
  }

  // Verifica se o n√∫mero j√° foi tentado
  if (history.includes(palpite)) {
    mensagem.innerHTML = "‚ö†Ô∏è Voc√™ j√° tentou esse n√∫mero!";
    return;
  }

  history.push(palpite);
  numberOfGuesses++;
  const remainingAttempts = attempts - numberOfGuesses;

  // ==================================================
  // PALPITE CORRETO
  // ==================================================
  if (palpite === number) {
  limparInputPalpite();
  currentLevel++;

  try {
    await fetch(`${API_URL}/atualizar-nivel`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        id: nomeJogador,
        nivelAtual: currentLevel,
        vidas: lives,
      }),
    });
    await carregarRanking();
  } catch (err) {}

  estadoDeTransicao = true;

  if (currentLevel > 10) {
    // Vit√≥ria final
    transicaoDeTela("gameArea", "vitoriaFinalArea");
    iniciarConfetesLoop();
    iniciarCoroaLoop();
    document.getElementById("mensagemFinalVitoria").innerHTML = `
      ${randomPhrase(Bozz)}<br> O n√∫mero era ${number}.<br> üëë Voc√™ zerou o jogo!
    `;
  } else {
    // Vit√≥ria comum
    transicaoDeTela("gameArea", "vitoriaArea"); 
    iniciarConfetesLoop();
    iniciarTrofeuLoop();
    document.getElementById("mensagemVitoria").innerHTML = `
      ${randomPhrase(victory)}<br> O n√∫mero era ${number}.<br> üéâ Vamos para o n√≠vel ${currentLevel}...
    `;
  }

  return;
}

  // ==================================================
  // PALPITE INCORRETO ‚Äî mostra dica
  // ==================================================
  if (palpite < number) {
    mensagem.innerHTML = `${randomPhrase(kickeItDown)} <br>
    ${tentativePhraseGenerator(remainingAttempts)}`;
  } else {
    mensagem.innerHTML = `${randomPhrase(
      kickedUp
    )} <br> ${tentativePhraseGenerator(remainingAttempts)}`;
  }

  // Exibe hist√≥rico se modo f√°cil estiver ativado
  if (historicalShow) {
    historico.innerHTML = `üìú Palpites anteriores: ${history.join(", ")}`;
  }

  document.getElementById("palpite").value = "";

  // ==================================================
  // VERIFICA SE ACABARAM AS TENTATIVAS
  // ==================================================
  if (remainingAttempts === 0) {
    lives--;
    atualizarVidas();

    const nomeJogador = localStorage.getItem("nomeJogador");

    if (lives === 0) {
      // Game Over
      currentLevel = 1;
      estadoDeTransicao = true;

      const mensagemFinal = randomPhrase(gameOver);
      transicaoDeTela("gameArea", "gameOverArea");
      iniciarGameOverLoop();
      document.getElementById(
        "mensagemFinal"
      ).innerHTML = `${mensagemFinal} <br> O n√∫mero era ${number}.`;

      document.getElementById("palpite").disabled = true;
      document.getElementById("enviarPalpite").disabled = true;

      limparInputPalpite();
      return;
    }
    if (lives > 0) {
      // Perdeu uma vida
      estadoDeTransicao = true;
      transicaoDeTela("gameArea", "vidaPerdidaArea");
      iniciarCoracaoLoop();
      document.getElementById(
        "mensagemVidaPerdida"
      ).innerHTML = `${randomPhrase(
        defait
      )}<br> O n√∫mero secreto era ${number}. <br> Vidas restantes: ${lives} ‚ù§Ô∏è`;
      return;
    }
  }
}

// ==================================================
// FUN√á√ïES AUXILIARES
// ==================================================

// Gera n√∫mero aleat√≥rio entre min e max
function getNumberRandon(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Define o intervalo de n√∫meros com base no n√≠vel
function multipliedByLevel(level) {
  if (level <= 5) return level * 20;
  if (level <= 9) return level * 100;
  return 1000;
}

// Seleciona frase aleat√≥ria de um array
function randomPhrase(array) {
  return array[Math.floor(Math.random() * array.length)];
}

// Gera frase de incentivo com base nas tentativas restantes
function tentativePhraseGenerator(remainingAttempts) {
  let selectedPhrases =
    remainingAttempts >= 5
      ? attemptPhrases5
      : remainingAttempts >= 2
      ? attemptPhrases3
      : attemptPhrases1;

  return selectedPhrases[
    Math.floor(Math.random() * selectedPhrases.length)
  ].replace("{X}", remainingAttempts);
}

// ==================================================
// EVENTO: Enter no input de palpite
// Descri√ß√£o: Permite enviar palpite pressionando Enter
// ==================================================
document.getElementById("palpite")
  .addEventListener("keydown", function (event) {
    if (event.key === "Enter") {
      event.preventDefault(); 
      jogar(); 
    }
  });

